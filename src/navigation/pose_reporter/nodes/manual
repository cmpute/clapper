#!/usr/bin/env python

import numpy as np
import rospy
import tf.transformations as tft
import tf2_ros as tf2
import utm # utm is required

from zzz_common.params import parse_private_args
from zzz_common.kinematics import get_absolute_state
from zzz_driver_msgs.msg import RigidBodyStateStamped
from geometry_msgs.msg import TransformStamped
from nav_msgs.msg import Odometry
from sensor_msgs.msg import NavSatFix, Imu
from message_filters import ApproximateTimeSynchronizer, Subscriber

class Node(object):
    # TODO: add service callback to update map origin or reset odom origin, this will update both self._map_origin and self._odom_translation
    # TODO: add mode options, init_mode / update_mode: GNSS+ODOM, GNSS+IMU, GNSS+ODOM+IMU, order matters, value from sensor at left will be prioritized
    def __init__(self):
        params = parse_private_args(
            odom_input_topic = "/zzz/perception/odometry", # we will make sure odometry starts from origin of "odom" frame
            pose_output_topic = "ego_pose",
            gnss_input_topic = "/zzz/drivers/gnss",
            imu_input_topic = "",
            map_origin = [0, 0, 0], # [lat, lon, alt]
            odom_translation = [0, 0, 0], # [x, y, z] in UTM
            odom_rotation = [0, 0, 0, 1], # [x, y, z, w]
            guess_from_start = False, # Guess odom to map from the first message
        )

        self._tfreporter = tf2.TransformBroadcaster()
        self._tfreporter_static = tf2.StaticTransformBroadcaster()
        self._tfupdate = False
        self._guess_from_start = params.guess_from_start

        self._map_origin = params.map_origin # GPS location of map origin. Map origin will be (0,0,0) in local ENU frame
        self._odom_translation = params.odom_translation # initial translation from map origin to odom start
        self._odom_rotation = params.odom_rotation # initial rotation from map axis (ENU) to odom start axis
        self._init_position = None
        self._init_orientation = None

        if params.imu_input_topic:
            # prioritize IMU measurement over odometry

            self._pose_subscriber = [
                Subscriber(params.odom_input_topic, Odometry),
                Subscriber(params.imu_input_topic, Imu),
            ]
            self._pose_synchronizer = ApproximateTimeSynchronizer(
                self._pose_subscriber, 5, 0.1)
            self._pose_synchronizer.registerCallback(self.pose_callback)
            self._pose_publisher = rospy.Publisher(params.pose_output_topic, RigidBodyStateStamped, queue_size=1)

            if self._guess_from_start:
                self._guess_subscriber = [
                    Subscriber(params.gnss_input_topic, NavSatFix),
                    Subscriber(params.odom_input_topic, Odometry),
                    Subscriber(params.imu_input_topic, Imu)
                ]
                self._guess_synchronizer = ApproximateTimeSynchronizer(
                    self._guess_subscriber, 5, 0.1)
                self._guess_synchronizer.registerCallback(self.guess_start_callback)

        else:

            self._pose_subscriber = rospy.Subscriber(params.odom_input_topic, Odometry, self.pose_callback_odom)
            self._pose_publisher = rospy.Publisher(params.pose_output_topic, RigidBodyStateStamped, queue_size=1)

            if self._guess_from_start:
                self._guess_subscriber = [
                    Subscriber(params.gnss_input_topic, NavSatFix),
                    Subscriber(params.odom_input_topic, Odometry)
                ]
                self._guess_synchronizer = ApproximateTimeSynchronizer(
                    self._guess_subscriber, 5, 0.1)
                self._guess_synchronizer.registerCallback(self.guess_start_callback_gnss_odom)

    def guess_start_callback(self, gnss, odom, imu):
        if not self._guess_from_start: # Prevent duplicate call
            return

        map_proj = utm.from_latlon(self._map_origin[0], self._map_origin[1])
        rospy.logdebug("Receive GNSS: lon=%f, lat=%f" % (gnss.longitude, gnss.latitude))
        gnss_proj = utm.from_latlon(gnss.latitude, gnss.longitude)
        # TODO: record covariance

        position = np.array([
            odom.pose.pose.position.x,
            odom.pose.pose.position.y,
            odom.pose.pose.position.z
        ])

        if imu:
            orientation = np.array([
                imu.orientation.x,
                imu.orientation.y,
                imu.orientation.z,
                imu.orientation.w,
            ])
        else:
            orientation = np.array([
                odom.pose.pose.orientation.x,
                odom.pose.pose.orientation.y,
                odom.pose.pose.orientation.z,
                odom.pose.pose.orientation.w
            ])

        self._odom_translation = [
            gnss_proj[0] - map_proj[0], # East
            gnss_proj[1] - map_proj[1], # North
            gnss.altitude - self._map_origin[2] # Up
        ]
        self._odom_rotation = orientation # assume that the orientation starts from East direction
        self._init_position = position
        self._init_orientation = orientation

        self._tfreporter_static.sendTransform(self.create_map_odom_transform())

        # Unregister subscriber
        for sub in self._guess_subscriber:
            sub.sub.unregister()
        self._guess_from_start = False

    def guess_start_callback_gnss_odom(self, gnss, odom):
        self.guess_start_callback(gnss, odom, None)

    def pose_callback(self, odom, imu):
        if self._guess_from_start: # don't report if map origin is not initialized
            return

        # calculate relative odom
        if imu:
            # TODO: imu and odom can be in different frame
            pose_quat = [imu.orientation.x, imu.orientation.y, imu.orientation.z, imu.orientation.w]
        else:
            pose_quat = [
                odom.pose.pose.orientation.x,
                odom.pose.pose.orientation.y,
                odom.pose.pose.orientation.z,
                odom.pose.pose.orientation.w
            ]
        init_iquat = tft.quaternion_inverse(self._init_orientation)
        rel_quat = tft.quaternion_multiply(init_iquat, pose_quat)

        pos = np.array([odom.pose.pose.position.x, odom.pose.pose.position.y, odom.pose.pose.position.z])
        diff = np.dot(pos - self._init_position, tft.quaternion_matrix(init_iquat)[:3,:3].T)
        odom.pose.pose.position.x = diff[0]
        odom.pose.pose.position.y = diff[1]
        odom.pose.pose.position.z = diff[2]
        odom.pose.pose.orientation.x = rel_quat[0]
        odom.pose.pose.orientation.y = rel_quat[1]
        odom.pose.pose.orientation.z = rel_quat[2]
        odom.pose.pose.orientation.w = rel_quat[3]

        self._tfreporter.sendTransform(self.create_odom_base_transform(odom))

        rel_state = RigidBodyStateStamped()
        rel_state.header = odom.header
        rel_state.state.child_frame_id = odom.child_frame_id
        rel_state.state.pose = odom.pose
        rel_state.state.twist = odom.twist
        # TODO: add IMU values into state

        # Transformation from odom frame to map is static
        odom_state = RigidBodyStateStamped()
        odom_state.header.frame_id = "map"
        odom_state.state.child_frame_id = "odom"

        odom_state.state.pose.pose.position.x = self._odom_translation[0]
        odom_state.state.pose.pose.position.y = self._odom_translation[1]
        odom_state.state.pose.pose.position.z = self._odom_translation[2]
        odom_state.state.pose.pose.orientation.x = self._odom_rotation[0]
        odom_state.state.pose.pose.orientation.y = self._odom_rotation[1]
        odom_state.state.pose.pose.orientation.z = self._odom_rotation[2]
        odom_state.state.pose.pose.orientation.w = self._odom_rotation[3]

        state = get_absolute_state(rel_state, odom_state, check_frame=False)
        self._pose_publisher.publish(state)

        euler = np.array(tft.euler_from_quaternion([
            state.state.pose.pose.orientation.x,
            state.state.pose.pose.orientation.y,
            state.state.pose.pose.orientation.z,
            state.state.pose.pose.orientation.w
        ])) * 180 / np.pi
        rospy.logdebug("Position: x=%.3f, y=%.3f, z=%.3f, Orientation: r=%.3f°, p=%.3f°, y=%.3f°",
            state.state.pose.pose.position.x, state.state.pose.pose.position.y, state.state.pose.pose.position.z,
            euler[0], euler[1], euler[2])

    def pose_callback_odom(self, odom):
        self.pose_callback(odom, None)

    def create_map_odom_transform(self):
        transform = TransformStamped()
        transform.header.stamp = rospy.Time.now()
        transform.header.frame_id = "map"
        transform.child_frame_id = "odom"
        transform.transform.translation.x = self._odom_translation[0]
        transform.transform.translation.y = self._odom_translation[1]
        transform.transform.translation.z = self._odom_translation[2]
        transform.transform.rotation.x = self._odom_rotation[0]
        transform.transform.rotation.y = self._odom_rotation[1]
        transform.transform.rotation.z = self._odom_rotation[2]
        transform.transform.rotation.w = self._odom_rotation[3]
        return transform

    def create_odom_base_transform(self, odom_msg):
        transform = TransformStamped()
        transform.header.stamp = odom_msg.header.stamp
        transform.header.frame_id = "odom"
        transform.child_frame_id = odom_msg.child_frame_id
        transform.transform.translation = odom_msg.pose.pose.position
        transform.transform.rotation = odom_msg.pose.pose.orientation
        return transform


if __name__ == "__main__":
    rospy.init_node("pose_reporter", log_level=rospy.DEBUG)
    node = Node()
    rospy.spin()
